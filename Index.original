var http = require('http'),
    express = require('express'),
    path = require('path');
    MongoHandle = require('mongodb').MongoClient;
    MongoServer = require('mongodb').Server;
    Collections = require('./collections').collections;


var app = express();
app.set('port', process.env.PORT || 3000); 
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(express.bodyParser());
app.use(express.static(path.join(__dirname, 'public')));

//Set the Database Connection String here
var mongohost ='localhost';
var mongoport = 27017
var collections;

//Open the connection with database now..
var mongohandle = new MongoHandle(new MongoServer(mongohost,mongoport));
mongohandle.open(function(err,mongohandle){
	if(!mongohandle){
		console.error("Oops ! MongoDB is not available..Start it");
		process.exit(1);
	}
	var db = mongohandle.db("PaaSWorkshop");
	collections = new Collections(db);
});
//AT this stage, we do have our DB connectivity established !
 
app.get('/', function (req, res) {
  res.send('<html><body><h1>Welcome to PaaS Workshop !!</h1></body></html>');
});

//Get the Collections from Mongo -- Route
app.get('/collections/:collection', function(req, res) { //A
   var params = req.params; //B
   collections.findAll(req.params.collection, function(error, objs) { //C
    	  if (error) { res.send(400, error); } //D
	      else { 
	          if (req.accepts('html')) { //E
    	          res.render('data',{objects: objs, collection: req.params.collection}); //F
              } else {
	          res.set('Content-Type','application/json'); //G
                  res.send(200, objs); //H
              }
         }
   	});
});

app.get('/collections/:collection/:entity', function(req, res) { //I
   var params = req.params;
   var entity = params.entity;
   var collection = params.collection;
   if (entity) {
       collections.get(collection, entity, function(error, objs) { //J
          if (error) { res.send(400, error); }
          else { res.send(200, objs); } //K
       });
   } else {
      res.send(400, {error: 'bad url', url: req.url});
   }
});


app.post('/collections/:collection', function(req, res) { //A
    var object = req.body;
    var collection = req.params.collection;
    collections.save(collection, object, function(err,docs) {
          if (err) { res.send(400, err); } 
          else { res.send(201, docs); } //B
     });
});

app.delete('/collections/:collection/:entity', function(req, res) {
    var params = req.params;
    var entity = params.entity;
    var collection = params.collection;
    if (entity) {
       collections.delete(collection, entity, function(error, objs) { 
          if (error) { res.send(400, error); }
          else { res.send(200, objs); } 
       });
   } else {
       var error = { "message" : "Cannot DELETE a whole collection" };
       res.send(400, error);
   }
});

app.use(function (req,res) {
    res.render('404', {url:req.url});
});
 
http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});